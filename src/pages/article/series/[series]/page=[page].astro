---
import Layout from '../../../../layouts/Layout.astro';
import ArticleCard from '../../../../components/modules/Card/ArticleCard';
import Pagination from '../../../../components/modules/Pagination/Pagination.astro';
import { BASE_URL } from '../../../../scripts/modules/baseURL.js';
import { array__allArticleData } from '../../../../scripts/api/notionBlog.js';
import { array__allSeries } from '../../../../scripts/modules/array__allSeries.js';

export async function getStaticPaths({paginate}) {
  array__allArticleData.filter((article) => {
    return array__allSeries.filter((value) => {
      if(article.series === value.series){
        article["seriesSlug"] = value.seriesSlug;
        article["seriesImage"] = value.seriesImage;
      }
    })
  })

  const array__unipueSeries = [...new Set(array__allArticleData.map((article) => article.seriesSlug).flat())];

  return array__unipueSeries.flatMap((series) => {
    const array__filterArticle = array__allArticleData.filter((article) => article.seriesSlug.includes(series));
    return paginate(array__filterArticle,{
      params:{ 
        series
      },
      pageSize: 5,
      props: { 
        article: array__filterArticle,
        series_ja: array__filterArticle[0]["series"],
      },
    }) 
  });
}

const { page,series_ja,series_image } = Astro.props;
const article = page.data;
const { series } = Astro.params;
const totalPageNumber = Math.ceil(page.total / page.size);
let currentPageNumber;
currentPageNumber = page.currentPage;
let width = 1;

const paginationGenerator = () => {
  const prev = currentPageNumber - width
  const next = currentPageNumber + width + 1
  const ranges = []
  const rangeWidthDots = []
  let length;
  for (let i = 1; i <= totalPageNumber; i += 1) {
    if (i === 1 || i === totalPageNumber || (i >= prev && i <= next)) {
      ranges.push(i)
    } else if (i < prev) {
      i = prev - 1
    } else if (i > next) {
      ranges.push(totalPageNumber)
      break
    }
  }
  ranges.forEach((range) => {
    if (length) {
      if (range - length === 2) {
        rangeWidthDots.push(length + 1)
      } else if (range - length !== 1) {
        rangeWidthDots.push('...')
      }
    }
    rangeWidthDots.push(range)
    length = range
  })
  return rangeWidthDots  
}

const publishedArticle = article.filter((value) => {
  return value.published;
});

// 構造化データのマークアップ
const hierarchies = [
  {
    position : 2,
    itemName: `「${series_ja}」のガンプラ一覧`,
    itemPath: `${BASE_URL}/article/series/${series}/page=1`
  },
  {
    position : 3,
    itemName: `${page.currentPage}ページ目`,
    itemPath: `${BASE_URL}/article/series/${series}/page=${page.currentPage}`
  },

]

// パンくずリスト
const lists = [
  { 
    name: `「${series_ja}」のガンプラ一覧`,
    path: `${BASE_URL}/article/series/${series}/page=1`
  },
  {
    name: `${page.currentPage}ページ目`,
    path: `${BASE_URL}/article/series/${series}/page=${page.currentPage}`
  }
]

---

<Layout 
  title=`「${series_ja}」のガンプラ一覧 | ガンプラデータベースブログ`
  description=`「${series_ja}」のガンプラ一覧です。`
  url=`${BASE_URL}/article/series/${series}/page=1`
  hierarchies={hierarchies}
  lists={lists}
>
  <main>
    <section class="articleList">
      <div class="inner">
        <div class="keyVisual">
          <img src=`https://raw.githubusercontent.com/zatty-5118/gdbb/refs/heads/main/public/images/series/${series}.jpg` alt="">
        </div>
        <div class="title">
          <h1>「{series_ja}」のガンプラ一覧</h1>
        </div>
        <ArticleCard articles={publishedArticle} cardType="border" client:load/>
      </div>
    </section>
    <Pagination
      totalPageNumber={totalPageNumber}
      currentPageNumber={currentPageNumber}
      paginationGenerator={paginationGenerator}
      page={page}
      BASE_URL={BASE_URL}
      category="series"
      slug={series}
    />

    <!-- {totalPageNumber > 1 && (
      <section class="pagiNation">
        <div class="inner">
          <div class="first-button">
            {page.url.prev ? <a href={`${BASE_URL}/${page.url.prev}`}></a> : <p class="disabled"></p>}
          </div>
          <div class="number-list">
            <ul>
              {paginationGenerator().map((page) => {
                if (page === 1 && currentPageNumber === 1) {
                  return (
                    <li>
                      <p class="currentPageNumber">{page}</p>
                    </li>
                  )
                } else if (page === 1 && currentPageNumber > 1) {
                  return (
                    <li>
                      <a href={`${BASE_URL}/article/series/${series}/page=${page}`}>
                        {page}
                      </a>
                    </li>
                  )
                } else if (page === '...') {
                  return (
                    <li>
                      <p class="ellipses">{page}</p>
                    </li>
                  )
                } else if (page === currentPageNumber) {
                  return (
                    <li>
                      <p class="currentPageNumber">{page}</p>
                    </li>
                  )
                } 
                return (
                  <li>
                    <a href={`${BASE_URL}/article/series/${series}/page=${page}`}>
                      {page}
                    </a>
                  </li>
                )
              })}
            </ul>
          </div>
          <div class="last-button">
            {page.url.next ? <a href={`${BASE_URL}/${page.url.next}`}></a> : <p class="disabled"></p>}
          </div>
        </div>
      </section>
    )} -->
  </main>
</Layout>