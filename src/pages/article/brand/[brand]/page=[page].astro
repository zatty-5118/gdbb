---
import Layout from '../../../../layouts/Layout.astro';
import ArticleCard from '../../../../components/modules/Card/ArticleCard';
import Pagination from '../../../../components/modules/Pagination/Pagination.astro';
import { BASE_URL } from '../../../../scripts/modules/baseURL.js';
import { array__allArticleData } from '../../../../scripts/api/notionBlog.js';
import { array__allBrand } from '../../../../scripts/modules/array__allBrand.js';
import '../../../../styles/articleList.scss';

export async function getStaticPaths({paginate}) {
  array__allArticleData.filter((article) => {
    return array__allBrand.filter((value) => {
      if(article.brand.includes(value.brand)){
        return article["brandSlug"] = value.brandSlug
      }
    })
  })
  const array__unipueBrand = [...new Set(array__allArticleData.map((article) => article.brandSlug).flat())];

  return array__unipueBrand.flatMap((brand) => {
    const array__filterArticle = array__allArticleData.filter((article) => article.brandSlug.includes(brand));
    return paginate(array__filterArticle,{
      params:{ 
        brand
      },
      pageSize: 15,
      props: { 
        article: array__filterArticle,
        brand_ja: array__filterArticle[0]["brand"]
      },
    }) 
  });
}

const { page,brand_ja } = Astro.props;
const { brand } = Astro.params;
const article = page.data;
const totalPageNumber = Math.ceil(page.total / page.size);
let currentPageNumber;
currentPageNumber = page.currentPage;
let width = 1;
const paginationGenerator = () => {
  const prev = currentPageNumber - width
  const next = currentPageNumber + width + 1
  const ranges = []
  const rangeWidthDots = []
  let length;
  for (let i = 1; i <= totalPageNumber; i += 1) {
    if (i === 1 || i === totalPageNumber || (i >= prev && i <= next)) {
      ranges.push(i)
    } else if (i < prev) {
      i = prev - 1
    } else if (i > next) {
      ranges.push(totalPageNumber)
      break
    }
  }
  ranges.forEach((range) => {
    if (length) {
      if (range - length === 2) {
        rangeWidthDots.push(length + 1)
      } else if (range - length !== 1) {
        rangeWidthDots.push('...')
      }
    }
    rangeWidthDots.push(range)
    length = range
  })
  return rangeWidthDots  
}
const publishedArticle = article.filter((value) => {
  return value.published;
});

// 構造化データのマークアップ
const hierarchies = [
  {
    position : 2,
    itemName: `「${brand_ja}」のガンプラ一覧`,
    itemPath: `${BASE_URL}/article/brand/${brand}/page=1`
  },
  {
    position : 3,
    itemName: `${page.currentPage}ページ目`,
    itemPath: `${BASE_URL}/article/list/page=${page.currentPage}`
  },

]

// パンくずリスト
const lists = [
  { 
    name: `「${brand_ja}」のガンプラ一覧`,
    path: `${BASE_URL}/article/brand/${brand}/page=1`
  },
  {
    name: `${page.currentPage}ページ目`,
    path: `${BASE_URL}/article/list/page=${page.currentPage}`
  }
]

---

<Layout 
  title=`「${brand_ja}」のガンプラ一覧 | ガンプラデータベースブログ`
  description=`「${brand_ja}」のガンプラ一覧です。`
  url=`${BASE_URL}/article/brand/${brand}/page=1`
  hierarchies={hierarchies}
  lists={lists}
>
  <main>
    <section class="articleList">
      <div class="inner">
        <div class="title">
          <h1>「{brand_ja}」のガンプラ一覧</h1>
        </div>
        <ArticleCard articles={publishedArticle} cardType="border" client:load/>
      </div>
    </section> 
    <Pagination
      totalPageNumber={totalPageNumber}
      currentPageNumber={currentPageNumber}
      paginationGenerator={paginationGenerator}
      page={page}
      BASE_URL={BASE_URL}
      category="brand"
      slug={brand}
    />
  </main>
</Layout>